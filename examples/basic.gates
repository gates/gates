// a gates program is an expression
(function () {
  // truthy && falsy
  map(function (v) { assert(v); }, [ [], true, function () {}, {}, 1, -1, 1.0, -1.0, "hello world" ]);
  map(function (v) { assert(!v); }, [ false, null, 0, 0.0, 0 / 0, "" ]);

  // comparison
  {
    assert_ne(0 / 0, 0 / 0);

    assert_eq(true, true);
    assert_ne(false, true);
    assert_ne(null, true);
    assert_ne(false, true);

    assert_eq(0, 0);
    assert_eq(0.0, 0);
    assert_eq(-0.0, 0);
    assert_ne(null, 0);

    assert_eq("", "");
    assert_eq("hello world", "hello world");
    assert_ne(null, "");
    assert_ne(null, "hello world\n");

    assert_eq([], []);
    assert_eq([ 1 ], [ 1 ]);
    assert_ne([ 1 ], [ 2 ]);
    assert_ne(null, []);
    assert_ne(null, [ 1 ]);

    assert_eq({}, {});
    assert_ne({}, { foo: "bar" });
    assert_ne(null, {});
    assert_ne(null, { foo: "bar" });
    assert_eq(null, null);
  }

  // arithmetic
  assert_eq(2, 1 + +1);
  assert_eq(-1, 1 + -2);
  assert_eq(2.5, 1 * 2.5);
  assert_eq(0.5, 1 / 2);
  assert_eq(1, 3 % 2);
  assert_eq(0.5, 3 % 2.5);

  // bit shifting
  assert_eq(2, 1 << 1);
  assert_eq(1, 2 >> 1);

  // assignment
  {
    let x = 1;
    let y = 2;
    let z = 0;
    z = x + y;
    assert_eq(3, z);

    t = 42;
    assert_eq(42, t);

    let array = [0];
    array[0] = 1;
    assert_eq(1, array[0]);

    let map = { a: 1 };
    map.b = 2;
    map["c"] = 3;
    assert_eq(1, map.a);
    assert_eq(2, map.b);
    assert_eq(3, map.c);

    let a = 1, b = 2, c = 3;
    assert_eq(1, a);
    assert_eq(2, b);
    assert_eq(3, c);
  }

  // block and scope
  {
    let x = 1;
    let y = 2;
    {
      let x = 2;
      assert_eq(2, x);
      assert_eq(2, y);
    }
    assert_eq(1, x);
  }

  // closure
  {
    let add = function (a) {
      return function (b) {
        return a + b;
      };
    };
    let add2 = add(2);
    assert_eq(42, add2(40));

    let fib = function (n) {
      if (n == 0 || n == 1) {
        return 1;
      }
      return fib(n - 1) + fib(n - 2);
    };
    assert_eq(89, fib(10));
  }

  // block visibility
  assert_eq(null, (function (i) {
    for (let i = 0; i < 2; i = i + 1) {
      i;
    }
    return i;
  })());

  // type tag
  assert_eq("array", type([]));
  assert_eq("bool", type(true));
  assert_eq("function", type(function () {}));
  assert_eq("function", type(assert_eq));
  assert_eq("map", type({}));
  assert_eq("null", type(null));
  assert_eq("number", type(42));
  assert_eq("number", type(-1.5));
  assert_eq("string", type(""));
})()
